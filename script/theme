#!/bin/sh

# param !!!local or global >>> path

# --------------------------------------
# Main Variable:
MAIN_PATH="$(dirname $(cd $(dirname $0);pwd))"
SCRIPT_PATH="$MAIN_PATH/script" # !!!---------------->>>
SCRIPT_FILE_PATH="$SCRIPT_PATH/$(basename $0)"

# Upload common shell file:
source $SCRIPT_PATH/common
printOut $SCRIPT_PATH

declare -A properties
commands=()
commands[0]='--local'   # local share path
commands[1]='--global'  
commands[2]='--no-install-kvantum'
commands[3]='--no-install-roundedsbe'
commands[4]='--no-install-roundedsbe-dep'

# User Settings:
SCRIPT_NAME=theme_script
WINDOW_STYLE_NAME="RoundedSBE"

THEME_PATH="$RESOURCE_PATH/theme"
GLOBAL_THEME_PATH="/usr/share"

arr_checkThemesPath=( \
    "$THEME_PATH/fonts" \
    "$THEME_PATH/icons" \
    "$THEME_PATH/cursors" \
    "$THEME_PATH/colors" \
    "$THEME_PATH/plasma_theme" \
    "$THEME_PATH/kvantum_theme" \
    "$THEME_PATH/window_style" \
    "$THEME_PATH/wallpapers" \
    "$THEME_PATH/gtk_theme" \
    "$THEME_PATH/grub_theme" \
    "$THEME_PATH/sddm_theme" \
    "$THEME_PATH/layout" \
)
# -----------------------------------

# -----------------------------------
# Functions:

installKvantum() {
    printOut "Kvantum Install"
    yes | pacman -Syy kvantum
    printWARNING "Start Kvantummanager, close after 2 seconds"
    kvantummanager
    sleep 2
    local kvantummanager_pid=`ps -ef | grep kvantummanager | grep -v grep | awk '{print $2}'`
    kill -9 $kvantummanager_pid
    printWARNING "Kill kvantummanager"
    printOut "Kvantum Installed"
}

installDepForRoundedSBE() {
    printOut "RoundedSBE Depend install"
    # yes | pacman -Syy git make cmake gcc gettext extra-cmake-modules qt5-tools kcrash kglobalaccel kde-dev-utils kio knotifications kinit kwin kdecoration qt5-declarative qt5-x11extras
    yes | sudo pacman -Syy
    yes | sudo pacman -S git make cmake 
    yes | sudo pacman -S gcc gettext extra-cmake-modules qt5-tools  kde-dev-utils kinit kwin kdecoration qt5-declarative qt5-x11extras
    yes | sudo pacman -S kcrash5 kglobalaccel5 kio5 knotifications5
    printOut "RoundedSBE Depend installed"
}

installRoundedSBE() {
    local INSTALL_PATH="/opt/local/kde"

    printOut "RoundedSBE install"
    checkMkdir $INSTALL_PATH
    printWARNING "Check Msg: $INSTALL_PATH, state: $?"
    cp -Rf $THEME_PATH/window_style/$WINDOW_STYLE_NAME $INSTALL_PATH

    checkMkdir $INSTALL_PATH/$WINDOW_STYLE_NAME
    printWARNING "Check Msg: $INSTALL_PATH/$WINDOW_STYLE_NAME, state: $?"
    if [[ $? == '0' ]];then
        printERROR "No Software path fond!"
    fi

    cd $INSTALL_PATH/$WINDOW_STYLE_NAME
    printOut "$(ls -la | grep ./install.sh)"
    ./install.sh
    printOut "RoundedSBE installed"
}

# param1: mod:> local or global
# param2: Local Config Path
kvantumInstallTheme() {
    local mod=$1
    local LOCAL_CONFIG_PATH=$2

    printOut "Kvantum Theme Install"

    local LOCAL_KVANTUM_PATH="$LOCAL_CONFIG_PATH/Kvantum"
    local GLOBAL_KVANTUM_PATH='/usr/share/Kvantum'
    checkMkdir $GLOBAL_KVANTUM_PATH
    printWARNING "Check Msg: $GLOBAL_KVANTUM_PATH, state: $?"
    checkMkdir $LOCAL_KVANTUM_PATH
    printWARNING "Check Msg: $LOCAL_KVANTUM_PATH, state: $?"

    if [[ $mod == 'local' ]];then
        cp -Rf $THEME_PATH/kvantum_theme/* $LOCAL_KVANTUM_PATH
    elif [[ $mod == 'global' ]];then
        cp -Rf $THEME_PATH/kvantum_theme/* $GLOBAL_KVANTUM_PATH
    else
        printERROR "func kvantumInstallTheme Command Error!!!"
        exit 1
    fi

    printOut "Kvantum Theme Installed"
}

commonInstallTheme() {
    printOut "Common Theme Install"
    # GTK Theme
    checkMkdir $GLOBAL_THEME_PATH/themes
    printWARNING "Check Msg: $GLOBAL_THEME_PATH/themes, state: $?"
    cp -Rf $THEME_PATH/gtk_theme/* $GLOBAL_THEME_PATH/themes

    # Wallpapers
    checkMkdir $GLOBAL_THEME_PATH/wallpapers
    printWARNING "Check Msg: $GLOBAL_THEME_PATH/wallpapers, state: $?"
    cp -Rf $THEME_PATH/wallpapers/* $GLOBAL_THEME_PATH/wallpapers

    # Fonts
    checkMkdir $GLOBAL_THEME_PATH/fonts
    printWARNING "Check Msg: $GLOBAL_THEME_PATH/fonts, state: $?"
    cp -Rf $THEME_PATH/fonts/* $GLOBAL_THEME_PATH/fonts
    fc-cache -f -v

    # Layout
    checkMkdir $GLOBAL_THEME_PATH/plasma/layout-templates
    printWARNING "Check Msg: $GLOBAL_THEME_PATH/plasma/layout-templates, state: $?"
    cp -Rf $THEME_PATH/layout/* $GLOBAL_THEME_PATH/plasma/layout-templates

    # SDDM Theme
    checkMkdir $GLOBAL_THEME_PATH/sddm/themes
    printWARNING "Check Msg: $GLOBAL_THEME_PATH/sddm/themes, state: $?"
    cp -Rf $THEME_PATH/sddm_theme/* $GLOBAL_THEME_PATH/sddm/themes

    # Grub Theme
    checkMkdir $GLOBAL_THEME_PATH/grub/themes
    printWARNING "Check Msg: $GLOBAL_THEME_PATH/grub/themes, state: $?"
    cp -Rf $THEME_PATH/grub_theme/* $GLOBAL_THEME_PATH/grub/themes

    printOut "Common Theme Installed"
}

globalInstallTheme() {
    local GLOBAL_SHARE_PATH="/usr/share"

    printOut "Global Theme Install"
    # Icon
    checkMkdir $GLOBAL_SHARE_PATH/icons
    printWARNING "Check Msg: $GLOBAL_SHARE_PATH/icons, state: $?"
    for dir_path in "$THEME_PATH/icons"/*;do
        new_dir_name="$(basename $dir_path)-icon"
        cp -Rf $dir_path $GLOBAL_SHARE_PATH/icons/$new_dir_name
    done

    # Cursors
    checkMkdir $GLOBAL_SHARE_PATH/icons
    printWARNING "Check Msg: $GLOBAL_SHARE_PATH/icons, state: $?"
    for dir_path in "$THEME_PATH/cursors"/*;do
        new_dir_name="$(basename $dir_path)-cursors"
        cp -Rf $dir_path $GLOBAL_SHARE_PATH/icons/$new_dir_name
    done

    # Plasma Theme
    checkMkdir $GLOBAL_SHARE_PATH/plasma/desktoptheme
    printWARNING "Check Msg: $GLOBAL_SHARE_PATH/plasma/desktoptheme, state: $?"
    cp -Rf $THEME_PATH/plasma_theme/* $GLOBAL_SHARE_PATH/plasma/desktoptheme/

    # Color
    checkMkdir $GLOBAL_SHARE_PATH/color-schemes
    printWARNING "Check Msg: $GLOBAL_SHARE_PATH/color-schemes, state: $?"
    cp -Rf $THEME_PATH/colors/* $GLOBAL_SHARE_PATH/color-schemes

    printOut "Global Theme Installed"
}

# param1: local share path
localInstallTheme() {
    local LOCAL_SHARE_PATH=$1

    printOut "Local Theme Install"
    # Icon
    checkMkdir $LOCAL_SHARE_PATH/icons
    printWARNING "Check Msg: $LOCAL_SHARE_PATH/icons, state: $?"
    for dir_path in "$THEME_PATH/icons"/*;do
        new_dir_name="$(basename $dir_path)-icon"
        cp -Rf $dir_path $LOCAL_SHARE_PATH/icons/$new_dir_name
    done
    chown $ORIGINAL_USER:$ORIGINAL_GROUP -R $LOCAL_SHARE_PATH/icons/*
    

    # Cursors
    checkMkdir $LOCAL_SHARE_PATH/icons
    printWARNING "Check Msg: $LOCAL_SHARE_PATH/icons, state: $?"
    for dir_path in "$THEME_PATH/cursors"/*;do
        new_dir_name="$(basename $dir_path)-cursors"
        cp -Rf $dir_path $LOCAL_SHARE_PATH/icons/$new_dir_name
    done
    chown $ORIGINAL_USER:$ORIGINAL_GROUP -R $LOCAL_SHARE_PATH/icons/*

    # Plasma Theme
    checkMkdir $LOCAL_SHARE_PATH/plasma/desktoptheme
    printWARNING "Check Msg: $LOCAL_SHARE_PATH/plasma/desktoptheme, state: $?"
    cp -Rf $THEME_PATH/plasma_theme/* $LOCAL_SHARE_PATH/plasma/desktoptheme/
    chown $ORIGINAL_USER:$ORIGINAL_GROUP -R $LOCAL_SHARE_PATH/plasma/desktoptheme/*

    # Color
    checkMkdir $LOCAL_SHARE_PATH/color-schemes
    printWARNING "Check Msg: $LOCAL_SHARE_PATH/color-schemes, state: $?"
    cp -Rf $THEME_PATH/colors/* $LOCAL_SHARE_PATH/color-schemes
    chown $ORIGINAL_USER:$ORIGINAL_GROUP -R $LOCAL_SHARE_PATH/color-schemes/*

    printOut "Local Theme Installed"
}


# Main -------------------------------
printVariable
sleep 2

## Init Properties
while [[ $# -gt 0 ]];do
    # Key
    check_command commands $1
    if [[ $? == '0' ]];then
        key=$1
    else
        printERROR "Command init ERROR"
        exit 1
    fi

    # Value
    check_command commands $2
    if [[ $? == '0' ]];then
        value=''
    else
        if [[ -z $2 ]];then
            value=''
        else
            value=$2
        fi
    fi

    setProperty properties $key $value
    if [[ -z $value ]];then shift 1; else shift 2; fi 
done

printProperties properties
sleep 4

## init check command
isExistKey properties '--local'
state1=$?
isExistKey properties '--global'
state2=$?
printOut "State1: $state1 | State2: $state2"
if [ $state1 == '1' ] && [ $state2 == '1' ];then
    printERROR "Missing key parameters"
    exit 1
fi
unset state1
unset state2

## init check path
isExistPath $THEME_PATH
if [[ $? == '1' ]];then
    printERROR "No $THEME_PATH"
    exit 1
fi

for_errors_path=()
for_check_status=0
for path in ${arr_checkThemesPath[@]};do
    isExistPath $path
    
    if [[ $? == '1' ]];then
        for_errors_path+=("$path")
        for_check_status=1
    fi
done

if [[ $for_check_status == '1' ]];then
    for path in ${for_errors_path[@]};do
        printERROR "No $path"
    done
    exit 1
fi
unset for_errors_path
unset for_check_status

## Flow
### Kvantum
isExistKey properties '--no-install-kvantum'
if [[ $? == '1' ]];then
    installKvantum
else
    printWARNING "Skip install kvantum"
fi

### RoundedSBE Dep
isExistKey properties '--no-install-roundedsbe-dep'
if [[ $? == '1' ]];then
    installDepForRoundedSBE
else
    printWARNING "Skip install RoundedSBE Dep"
fi

### RoundedSBE
isExistKey properties '--no-install-roundedsbe'
if [[ $? == '1' ]];then
    installRoundedSBE
else
    printWARNING "Skip install RoundedSBE"
fi

### Common Theme
commonInstallTheme

### Local Theme
isExistKey properties '--local'
if [[ $? == '0' ]];then
    localInstallTheme "${properties['--local']}"
    kvantumInstallTheme 'local' "$(dirname $(dirname ${properties['--local']}))/.config"
fi

### Global Theme
isExistKey properties '--global'
if [[ $? == '0' ]];then
    globalInstallTheme
    kvantumInstallTheme 'global'
fi

printOut " ------- Execution complete ------- "